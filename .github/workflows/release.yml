# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    #runs-on: ubuntu-18.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Debug Info
        run:  |
          lsb_release -a || /bin/true
          apt list --installed | grep gpg || /bin/true
          pgrep gpg-agent || /bin/true
          gpgconf --list-dirs agent-ssh-socket || /bin/true
          ls -al `gpgconf --list-dirs agent-ssh-socket` || /bin/true
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.23.4'
      -
        name: Import GPG key
        id: import_gpg
        run: |
          # Create a temporary file for the private key
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/private.key
          
          # Import the key with passphrase
          echo "${{ secrets.PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --import /tmp/private.key
          
          # Store fingerprint for use with goreleaser
          FINGERPRINT=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          echo "fingerprint=$FINGERPRINT" >> $GITHUB_OUTPUT
          
          # Configure Git (if needed)
          git config --global user.signingkey $FINGERPRINT
          git config --global commit.gpgsign true
          
          # Setup for non-interactive use with passphrase
          mkdir -p ~/.gnupg
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          gpg-connect-agent reloadagent /bye
          
          # Clean up
          rm /tmp/private.key
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2.8.1
        with:
          #version: latest
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

